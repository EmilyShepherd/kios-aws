# Bootstrap pod
#
# The job of the bootstrap pod is to contact the AWS metadata service
# and use it to determine how to connect to EKS api-server.
apiVersion: v1
kind: Pod
metadata:
  name: aws-bootstrap
  namespace: kube-system
spec:
  restartPolicy: OnFailure
  containers:
  - image: docker.io/emilyls/aws-bootstrap:v1.25.0-alpha5
    name: aws-bootstrap
    volumeMounts:
    - mountPath: /host/etc/kubernetes
      name: etc
    - mountPath: /host/usr/libexec/kubernetes/kubelet-plugins/credential-provider/exec
      name: credential-provider
    - mountPath: /host/etc/hostname
      name: hostname
    securityContext:
      # Running as root is required so that files can be created with
      # the correct permissions
      runAsNonRoot: false
      capabilities:
        drop:
        - ALL
  # Not strictly required, but generally a good idea to set as we do not
  # expect the Container Network Plugin to be ready by this point, and
  # we don't want to get stuck waiting forever for that.
  hostNetwork: true
  priorityClassName: system-node-critical
  tolerations:
  - operator: Exists
  volumes:
  # Kubelet Configuration and Authentication files will be placed in
  # this directory. Kubelet in kiOS knows to look in this directory for
  # everything it needs.
  - hostPath:
      path: /etc/kubernetes
      type: DirectoryOrCreate
    name: etc
  # The two binaries required to teach kubelet how to a) Login to ECR
  # and b) authenticate itself with the api-server, will be placed in
  # this directory.
  - hostPath:
      path: /usr/libexec/kubernetes/kubelet-plugins/credential-provider/exec
      type: DirectoryOrCreate
    name: credential-provider
  # It is very important that the hostname is correct for AWS Instance
  # Profile Authentication with the api-server to work. As a result the
  # bootstrap pod will always set the system hostname to whatever it is
  # told AWS expects it to be.
  - hostPath:
      path: /etc/hostname
      type: FileOrCreate
    name: hostname
